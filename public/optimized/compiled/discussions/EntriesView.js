(function(){var a=function(a,b){return function(){return a.apply(b,arguments)}},b={}.hasOwnProperty,c=function(a,c){function e(){this.constructor=a}for(var d in c)b.call(c,d)&&(a[d]=c[d]);return e.prototype=c.prototype,a.prototype=new e,a.__super__=c.prototype,a};define(["underscore","jquery","Backbone","compiled/discussions/EntryCollection","compiled/discussions/EntryCollectionView","compiled/discussions/EntryView","compiled/discussions/ParticipantCollection","compiled/discussions/MarkAsReadWatcher","jst/discussions/_reply_form","vendor/ui.selectmenu"],function(b,d,e,f,g,h,i,j,k,l){var m;return m=function(e){function k(){return this.onFetchSuccess=a(this.onFetchSuccess,this),this.onMarkAsRead=a(this.onMarkAsRead,this),this.initParticipants=a(this.initParticipants,this),this.initEntries=a(this.initEntries,this),k.__super__.constructor.apply(this,arguments)}return c(k,e),k.name="EntriesView",k.prototype.events={"click .entry":"handleEntryEvent"},k.prototype.initialize=function(){return this.$el=d("#discussion_subentries"),this.participants=new i,this.model.bind("change:participants",this.initParticipants),this.collection=new f,this.model.bind("change:view",this.initEntries),j.on("markAsRead",this.onMarkAsRead),this.model.fetch({success:this.onFetchSuccess})},k.prototype.initEntries=function(a,b){return this.collectionView=new g({$el:this.$el,collection:this.collection,showReplyButton:ENV.DISCUSSION.PERMISSIONS.CAN_REPLY}),this.collection.reset(b),this.updateFromNewEntries(),this.setUnreadEntries(),j.init()},k.prototype.updateFromNewEntries=function(){var a,c=this;return a=this.model.get("new_entries"),b.each(a,function(a){var b;return b=h.instances[a.id],b?b.model.set(a):(b=h.instances[a.parent_id]||c,b.collection.add(a))})},k.prototype.setUnreadEntries=function(){var a;return a=this.model.get("unread_entries"),b.each(a,function(a){return h.instances[a].model.set("read_state","unread")})},k.prototype.initParticipants=function(a,b){return this.participants.reset(b)},k.prototype.onMarkAsRead=function(a){var c,d;return d=this.model.get("unread_entries"),c=a.get("id"),this.model.set("unread_entries",b.without(d,c))},k.prototype.onFetchSuccess=function(){return this.model.trigger("fetchSuccess",this.model)},k.prototype.handleEntryEvent=function(a){var b,c,e,f,g;b=d(a.target).closest("[data-event]");if(!b.length)return;return f=b.data("event"),g=d(a.currentTarget),c=g.data("id"),e=h.instances[c],e[f](a,b),!1},k}(e.View)})}).call(this)